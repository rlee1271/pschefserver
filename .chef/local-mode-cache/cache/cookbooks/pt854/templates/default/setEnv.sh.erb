#!/bin/sh
# ***************************************************************
#  This software and related documentation are provided under a
#  license agreement containing restrictions on use and
#  disclosure and are protected by intellectual property
#  laws. Except as expressly permitted in your license agreement
#  or allowed by law, you may not use, copy, reproduce,
#  translate, broadcast, modify, license, transmit, distribute,
#  exhibit, perform, publish or display any part, in any form or
#  by any means. Reverse engineering, disassembly, or
#  decompilation of this software, unless required by law for
#  interoperability, is prohibited.
#  The information contained herein is subject to change without
#  notice and is not warranted to be error-free. If you find any
#  errors, please report them to us in writing.
#  
#  Copyright (C) 1988, 2014, Oracle and/or its affiliates.
#  All Rights Reserved.
# ***************************************************************
 

 

# *************************************************************************
# This script is used to setup the needed environment to be able to start Weblogic Server in this domain.
# 
# This script initializes the following variables before calling commEnv to set other variables:
# 
# WL_HOME         - The BEA home directory of your WebLogic installation.
# JAVA_VM         - The desired Java VM to use. You can set this environment variable before calling
#                   this script to switch between Sun or BEA or just have the default be set. 
# JAVA_HOME       - Location of the version of Java used to start WebLogic
#                   Server. Depends directly on which JAVA_VM value is set by default or by the environment.
# USER_MEM_ARGS   - The variable to override the standard memory arguments
#                   passed to java.
# PRODUCTION_MODE - The variable that determines whether Weblogic Server is started in production mode.
# DOMAIN_PRODUCTION_MODE 
#                 - The variable that determines whether the workshop related settings like the debugger,
#                   testconsole or iterativedev should be enabled. ONLY settable using the 
#                   command-line parameter named production
#                   NOTE: Specifying the production command-line param will force 
#                          the server to start in production mode.
# 
# Other variables used in this script include:
# SERVER_NAME     - Name of the weblogic server.
# JAVA_OPTIONS    - Java command-line options for running the server. (These
#                   will be tagged on to the end of the JAVA_VM and
#                   MEM_ARGS)
# 
# For additional information, refer to the WebLogic Server Administration
# Console Online Help(http://e-docs.bea.com/wls/docs91/ConsoleHelp/startstop.html).
# *************************************************************************

PIA_HOME=<%= @PIAHome %>
PS_HOME=<%= @PSHome %>
BEA_HOME=<%= @BEA_HOME %>
WL_HOME=<%= @WLHome %>
DOMAIN_NAME=<%= @DomainName %>


#JAVA_HOME is set via commEnv.sh.  To override set it here.
. $WL_HOME/common/bin/commEnv.sh >/dev/null 2>/dev/null
#JAVA_HOME=
#export JAVA_HOME

# JVM heap size and other runtime parameters for single-server configurations
# Depending on the volume of requests, the minimum and maximum JVM Heap Size parameters may need 
# to be increased. Other tunable JVM parameters, such as MaxPermSize, SurvivorRatio and noclassgc 
# may need to be reviewed. Please refer "PeopleSoft Online Performance Configuration Guidelines 
# Red Paper" for tuning the Web-Server JVM. 

JAVA_OPTIONS_AIX="-Xms128m -Xmx256m -Dtoplink.xml.platform=oracle.toplink.platform.xml.jaxp.JAXPPlatform -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0"
JAVA_OPTIONS_HPUX="-Xms256m -Xmx256m -XX:MaxPermSize=256m -Dtoplink.xml.platform=oracle.toplink.platform.xml.jaxp.JAXPPlatform -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0"
JAVA_OPTIONS_LINUX="<%= @JavaOptionsLinux %>"
JAVA_OPTIONS_SOLARIS="-Xms512m -Xmx512m -XX:MaxPermSize=256m -Dtoplink.xml.platform=oracle.toplink.platform.xml.jaxp.JAXPPlatform -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0"
JAVA_VM="-server ${JVM_D64}"

# Coherence*Web related parameters
# COHERENCE_PARAMETERS=-Dtangosol.coherence.session.localstorage=false
# Optionally add -Dtangosol.coherence.override=file:OVERRIDE_FILE_PATH
# Example: JAVA_OPTIONS_LINUX="$JAVA_OPTIONS_LINUX $COHERENCE_PARAMETERS"
# export JAVA_OPTIONS_LINUX
# Refer Coherence*Web documentation

# JVM heap size and other runtime parameters for multi-server configurations 
# In a multi server domain, the setting of JAVA_OPTIONS_ADMINSERVER applies 
# to both the admin and managed servers. 
# To set JVM options in a multi server domain, uncomment the environment variable 
# JAVA_OPTIONS_ADMINSERVER following these comments and set the value to the 
# required java options. 
# If not specified, the default options are -Xms256m -Xmx256m -XX:MaxPermSize=128m 
# Note that IBM JRE and Oracle JRockit do not have MaxPermSize setting. So the 
# default JVM Options for IBM JRE and Oracle JRockit are: -Xms256m -Xmx256m 
# If you specify JAVA_OPTIONS_ADMINSERVER for Solaris and HPUX platforms, you will 
# need to set MaxPermSize. For example, -XX:MaxPermSize=128m 
# If only -Xms and -Xmx are set on Solaris and HPUX platforms, 
# then MaxPermSize value will be default to 64m, which might cause OutOfMemory error 
# in multi-server configurations due to limited space in Perm space for garbage collection. 

# JAVA_OPTIONS_ADMINSERVER="set java options specifically for admin server here"

DOMAIN_HOME=${PIA_HOME}/webserv/${DOMAIN_NAME}
export DOMAIN_HOME

LONG_DOMAIN_HOME=${DOMAIN_HOME}
export LONG_DOMAIN_HOME

instrumentFlag=""
export instrumentFlag

# The following option stores the location of the SSL trust key store.  It is not
# anticipated that this will be moved to any other location.  This can be moved into
# an environment variable if 
SSL_KEY_STORE_PATH=${PIA_HOME}/webserv/${DOMAIN_NAME}/piaconfig/keystore/pskey

HOSTNAME=`hostname`
PRODUCTION_MODE=true
DISCOVERY_MODE=false
ADMINSERVER_PROTOCOL=HTTP
ADMINSERVER_PORT=9999
ADMINSERVER_HOSTNAME=<%= @AdmHostName %>
ADMINSERVER_SERVERNAME=<%= @AdmServerName %>
WL_VERSION=12.1
WL_SERVICEPACK=2
WL_PATCH=0
WEBLOGIC_CHUNKSIZE=65536
MAX_FILE_DESCRIPTORS=4096

BACKGROUND_PROCESS=true
ENABLE_JDPA_DEBUG=false
ENABLE_VERBOSE_GC=false
ENABLE_VERBOSE_SSL=false
ENABLE_VERBOSE_WL=false
ENABLE_HTTP_PROXY=false

HTTP_PROXY_HTTPHOST=
HTTP_PROXY_HTTPPORT=
HTTP_PROXY_HTTPSHOST=
HTTP_PROXY_HTTPSPORT=
# In some network configuration hostname or domainname may not return
# the expected values.  If that is the case in your environment
# simply hardcode your domain name in the HTTP_PROXY_NONPROXY lines below.
HTTP_PROXY_NONPROXY_HOSTS=localhost"|"`hostname`"|"*.`domainname`
SERVER_CLASS="weblogic.Server"


export SERVER_CLASS
export PIA_HOME
export PS_HOME
export DOMAIN_NAME
export BEA_HOME
export WL_HOME
export JAVA_HOME
export HOSTNAME
export PRODUCTION_MODE
export DISCOVERY_MODE
export ADMINSERVER_PROTOCOL
export ADMINSERVER_PORT
export ADMINSERVER_HOSTNAME
export ADMINSERVER_SERVERNAME
export BACKGROUND_PROCESS
export WL_VERSION
export WL_SERVICEPACK
export WL_PATCHLEVEL
export WEBLOGIC_CHUNKSIZE
export SSL_KEY_STORE_PATH
export MAX_FILE_DESCRIPTORS

findJDK() {
  if [ ! -f $JAVA_HOME/lib/tools.jar ]; then
    echo ""
    echo "PeopleTools and WebLogic Server require a JDK to be installed."
    echo ""
    echo "A JDK was not found in $JAVA_HOME."
    echo "Please refer to the WebLogic installation section of the PeopleTools"
    echo "Installation Guide for JDK installation procedures."
    echo ""
    exit
  fi
}


parseArgs() {
for P in "$@"; do
  if [ "${1}" = "-debug" ]; then
    ENABLE_JDPA_DEBUG=true
    DEBUG_PORT=7777
    DEBUG_PORT_OVERRIDE=false
  fi
  if [ "${1}" = "-debugport" ]; then
    ENABLE_JDPA_DEBUG=true
    DEBUG_PORT=$2
    DEBUG_PORT_OVERRIDE=true
  fi
  if [ "${1}" = "-foreground" ]; then
      BACKGROUND_PROCESS=false
      COMMANDLINE_OVERRIDE_BACKGROUND_PROCESS=true
      export BACKGROUND_PROCESS
  fi
  if [ "${1}" = "-capture" ]; then
      CAPTURE_STDOUT_STDERR=true
  fi
  if [ "${1}" = "-verbose:ssl" ]; then
    ENABLE_VERBOSE_SSL=true
  fi
  if [ "${1}" = "-verbose:gc" ]; then
    ENABLE_VERBOSE_GC=true
  fi
  if [ "${1}" = "-verbose:wl" ]; then
    ENABLE_VERBOSE_WL=true
  fi
  if [ "${1}" = "" ]; then
   break
  fi
  shift 1
done
export ENABLE_VERBOSE_GC
export ENABLE_JDPA_DEBUG
export ENABLE_VERBOSE_WL
export ENABLE_VERBOSE_SSL
export DEBUG_PORT_OVERRIDE
export DEBUG_PORT
export CAPTURE_STDOUT_STDERR
}

parseArgs $@

if [ "${instrumentFlag}" != "" ] ; then
	instrumentFlag="-Dweblogic.diagnostics.instrumentation=${instrumentFlag}"
	export instrumentFlag
fi

# If you want to override the default Patch Classpath, Library Path and Path for this domain,
# Please uncomment the following lines and add a valid value for the environment variables
# set PATCH_CLASSPATH=[myPatchClasspath] (windows)
# set PATCH_LIBPATH=[myPatchLibpath] (windows)
# set PATCH_PATH=[myPatchPath] (windows)
# PATCH_CLASSPATH=[myPatchClasspath] (unix)
# PATCH_LIBPATH=[myPatchLibpath] (unix)
# PATCH_PATH=[myPatchPath] (unix)

# Determine platform
case `uname -s` in
AIX)
  PS_VERITY_PATH=$PS_HOME/verity/aix/_rs6k43/bin
  if [ -n "${LIBPATH}" ]; then
    LIBPATH=${LIBPATH}:${WL_HOME}/server/native/aix/ppc:${PS_VERITY_PATH}
  else
    LIBPATH=${WL_HOME}/server/native/aix/ppc:${PS_VERITY_PATH}
  fi
  JAVA_OPTIONS="${JAVA_OPTIONS_AIX}"
  if [ `uname -v` = 5 ]; then
      JAVA_OPTIONS="${JAVA_OPTIONS_AIX} -Djava.net.preferIPv4Stack=true"
  fi
  AIXTHREAD_SCOPE=S
  AIXTHREAD_MUTEX_DEBUG=OFF
  AIXTHREAD_RWLOCK_DEBUG=OFF
  AIXTHREAD_COND_DEBUG=OFF
  export AIXTHREAD_SCOPE
  export AIXTHREAD_MUTEX_DEBUG
  export AIXTHREAD_RWLOCK_DEBUG
  export AIXTHREAD_COND_DEBUG
  LIBPATH=${PATCH_LIBPATH}:${LIBPATH}
  export LIBPATH
;;
HP-UX)
  if [ "`uname -m`" = "ia64" -o "`uname -m`" = "IA64" ]; then
  PS_VERITY_PATH=$PS_HOME/verity/hpux-ia64/_hpux64i/bin
    if [ -n "${SHLIB_PATH}" ]; then
      SHLIB_PATH=${SHLIB_PATH}:${WL_HOME}/server/native/hpux11/IPF32:${WL_HOME}/server/native/hpux11/IPF32/oci920_8:${PS_VERITY_PATH}
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${WL_HOME}/server/native/hpux11/IPF32:${WL_HOME}/server/native/hpux11/IPF32/oci920_8:${PS_VERITY_PATH}
    else
      SHLIB_PATH=${WL_HOME}/server/native/hpux11/IPF32:${WL_HOME}/server/native/hpux11/IPF32/oci920_8:${PS_VERITY_PATH}
      LD_LIBRARY_PATH=${WL_HOME}/server/native/hpux11/IPF32:${WL_HOME}/server/native/hpux11/IPF32/oci920_8:${PS_VERITY_PATH}
    fi
  else
  PS_VERITY_PATH=$PS_HOME/verity/hpux/_hpux/bin
    if [ -n "${SHLIB_PATH}" ]; then
      SHLIB_PATH=${SHLIB_PATH}:${WL_HOME}/server/native/hpux11/PA_RISC:${WL_HOME}/server/native/hpux11/PA_RISC/oci920_8:${PS_VERITY_PATH}
    else
      SHLIB_PATH=${WL_HOME}/server/native/hpux11/PA_RISC:${WL_HOME}/server/native/hpux11/PA_RISC/oci920_8:${PS_VERITY_PATH}
    fi
  fi
  JAVA_OPTIONS_HPUX="${JAVA_VM} ${JAVA_OPTIONS_HPUX}"
  JAVA_OPTIONS="${JAVA_OPTIONS_HPUX}"
  SHLIB_PATH=${PATCH_LIBPATH}:${SHLIB_PATH}
  export SHLIB_PATH
  LD_LIBRARY_PATH=${PATCH_LIBPATH}:${LD_LIBRARY_PATH}
  export LD_LIBRARY_PATH
;;
LINUX|Linux)
  PS_VERITY_PATH=$PS_HOME/verity/linux/_ilnx21/bin
  case `uname -m` in
     ia64|IA64|i686|I686|x86_64)
       ARCH=i686
     ;;
     *)
       echo "`uname -m` is an untested architecture.   Setting environment for i686."
       echo "Press ENTER to continue"
       read a
       ARCH=i686
  esac
  if [ -n "${LD_LIBRARY_PATH}" ]; then
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${WL_HOME}/server/native/linux/${ARCH}:${WL_HOME}/server/native/linux/${ARCH}/oci920_8:${PS_VERITY_PATH}
  else
    LD_LIBRARY_PATH=${WL_HOME}/server/native/linux/${ARCH}:${WL_HOME}/server/native/linux/${ARCH}/oci920_8:${PS_VERITY_PATH}
  fi
  JAVA_OPTIONS="${JAVA_OPTIONS_LINUX}"

  J2SE_PREEMPTCLOSE=1
  export J2SE_PREEMPTCLOSE
  LD_LIBRARY_PATH=${PATCH_LIBPATH}:${LD_LIBRARY_PATH}
  export LD_LIBRARY_PATH
  
;;
SunOS)
  arch=`uname -m`
  PS_VERITY_PATH=$PS_HOME/verity/solaris/_ssol26/bin
  if [ -n "${LD_LIBRARY_PATH}" ]; then
    if [ "${arch}" = "i86pc" ]; then
       LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${WL_HOME}/server/native/solaris/x86:${PS_VERITY_PATH}
    else
       LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${WL_HOME}/server/native/solaris/sparc:${WL_HOME}/server/native/solaris/sparc/oci920_8:${PS_VERITY_PATH}
    fi
  else
    if [ "${arch}" = "i86pc" ]; then
       LD_LIBRARY_PATH=${WL_HOME}/server/native/solaris/x86:${PS_VERITY_PATH}
    else
       LD_LIBRARY_PATH=${WL_HOME}/server/native/solaris/sparc:${WL_HOME}/server/native/solaris/sparc/oci920_8:${PS_VERITY_PATH}
    fi
  fi
  JAVA_OPTIONS_SOLARIS="${JAVA_VM} ${JAVA_OPTIONS_SOLARIS}"
  JAVA_OPTIONS="${JAVA_OPTIONS_SOLARIS}"
  LD_LIBRARY_PATH=${PATCH_LIBPATH}:${LD_LIBRARY_PATH}
  export LD_LIBRARY_PATH
;;
*)
  echo "$0: Don't know how to set the shared library path for `uname -s`.  "
  echo "Warning unknown OS platform.  Press ENTER to continue."
  read a
esac
export PS_VERITY_PATH
export JAVA_OPTIONS
# Clear Java option overrides.  If you need to specify a java option set it above in the user defined variables section
unset IBM_JAVA_OPTIONS
unset _JAVA_OPTIONS

#
# HTTP forward proxy setting.
#
if [ "${ENABLE_HTTP_PROXY}" = "true" -o "${ENABLE_HTTP_PROXY}" = "TRUE" ]; then
  HTTP_PROXY="-Dhttp.proxyHost=${HTTP_PROXY_HTTPHOST} -Dhttp.proxyPort=${HTTP_PROXY_HTTPPORT} -Dhttp.nonProxyHosts=${HTTP_PROXY_NONPROXY_HOSTS} -Dhttps.proxyHost=${HTTP_PROXY_HTTPSHOST} -Dhttps.proxyPort=${HTTP_PROXY_HTTPSPORT}"
  export HTTP_PROXY
  echo "Forward HTTP proxy settings: ${HTTP_PROXY}"
else
  unset HTTP_PROXY
fi

if [ "${ENABLE_VERBOSE_WL}" = "true" -o "${ENABLE_VERBOSE_WL}" = "TRUE" ]; then
  VERBOSE_WL="-Dweblogic.StdoutSeverityLevel=64 -Dweblogic.StdoutDebugEnabled=true -Dweblogic.StdoutEnabled=true"
fi

if [ "${ENABLE_VERBOSE_GC}" = "true" ]; then
   JAVA_OPTIONS="-verbose:gc ${JAVA_OPTIONS}"
fi

if [ "${ENABLE_JDPA_DEBUG}" = "true" ]; then
  JAVA_OPTIONS="${JAVA_OPTIONS} -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=$DEBUG_PORT,suspend=n"
fi

#Changed the java min and max heap values for admin server
if [ ! "${ADMINSERVER_SERVERNAME}" = "PIA" ]; then
   if [ ! "${MANAGED_SERVER}" = "true" ]; then
      if [ "${JAVA_OPTIONS_ADMINSERVER}" = "" ]; then
        case `uname -s` in
          AIX)
            JAVA_OPTIONS="-Xms256m -Xmx256m -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0 -Dweblogic.data.canTransferAnyFile=true"
	  ;;
	  Linux|LINUX)
	    JAVA_OPTIONS="-server -Xms256m -Xmx256m -XX:MaxPermSize=128m -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0 -Dweblogic.data.canTransferAnyFile=true"
	  ;;
	  *)
	    JAVA_OPTIONS="-Xms256m -Xmx256m -XX:MaxPermSize=128m -Dcom.sun.xml.namespace.QName.useCompatibleSerialVersionUID=1.0 -Dweblogic.data.canTransferAnyFile=true"
	    JAVA_OPTIONS="${JVM_D64} ${JAVA_OPTIONS}"
        esac                                                                                                                                              
      else
        JAVA_OPTIONS="${JAVA_OPTIONS_ADMINSERVER}"
      fi
   fi
fi

# Intentionally placed after admin server JVM memory settings so as to adjust the 
# admin server TCP chunk size as well.
if [ ! "${WEBLOGIC_CHUNKSIZE}" = "" ]; then
  JAVA_OPTIONS="${JAVA_OPTIONS} -Dweblogic.Chunksize=${WEBLOGIC_CHUNKSIZE}"
fi


# Check that script is being run from the appropriate directory
if [ ! -f ${WL_HOME}/server/lib/weblogic.jar ]; then
  echo "The WebLogic Server was not found in directory ${WL_HOME}." 1>&2
  echo Press ENTER to continue
  read
  exit
# Check for JRE
elif [ ! -f ${JAVA_HOME}/bin/java ]; then
  echo "A JRE was not found in directory ${JAVA_HOME}." 1>&2
  echo Press ENTER to continue
  read
  exit
fi

#---------------------------------------------
# Skipping JDK Check for current PeopleTools release.
# At this time PeopleTools only requires a JDK.   This may change.
#findJDK
#---------------------------------------------

# The following sets the number of file descriptors for a WLS process
# The value of MAX_FILE_DESCRIPTORS should be changed according to your environment

# Find the current hard limit value of the file descriptors on the system
maxfiles=`ulimit -H -n`
if [ "${maxfiles}" -lt "${MAX_FILE_DESCRIPTORS}" ] 2> /dev/null; then
   echo " "
   echo "********************WARNING******************************************************"
   echo "Hard limit value of the file descriptors on this system is set to $maxfiles"
   echo "In order to run the server process with ${MAX_FILE_DESCRIPTORS} file descriptors,"
   echo "increase the hard limit on the system equal or higher than the number "
   echo "MAX_FILE_DESCRIPTORS in setenv.sh"
   echo "*********************************************************************************"
   echo ""
else
   ulimit -n ${MAX_FILE_DESCRIPTORS}
fi


# Check for managed server instance and admin server name.

if [ "${MANAGED_SERVER}" = "true" ]; then
  if [ ${#} = 0 ]; then
   USAGE="SYNTAX_ERROR"
  elif [ ${#} = 1 ]; then
    SERVER_NAME=${1}
    if [ "${ADMINSERVER_HOSTNAME}" = "x" -o "${ADMINSERVER_PORT}" = "x" -o "${SERVER_NAME}" = "x" ]; then
      USAGE="SYNTAX_ERROR"
    else
      ADMIN_URL=${ADMINSERVER_PROTOCOL}://${ADMINSERVER_HOSTNAME}:${ADMINSERVER_PORT}
    fi
  elif [ ${#} > 1 ]; then
    SERVER_NAME=${1}
    ADMIN_URL=${2}
  else
     USAGE="SYNTAX_ERROR"
  fi
else
  SERVER_NAME=${ADMINSERVER_SERVERNAME}
fi

# Set environment
PSEARLIB=${PIA_HOME}/webserv/${DOMAIN_NAME}/lib
PSIGWLIB=${PIA_HOME}/webserv/${DOMAIN_NAME}/applications/peoplesoft/PSIGW.war/WEB-INF/lib

PSCLASSPATH=${PSEARLIB}/ps_patch.jar:${PSIGWLIB}/mail.jar
PSCLASSPATH=${PSCLASSPATH}

CLASSPATH=.:${PSCLASSPATH}:${PATCH_CLASSPATH}:${JAVA_HOME}/lib/tools.jar:${WL_HOME}/server/lib/weblogic_sp.jar:${WL_HOME}/server/lib/weblogic-classes.jar:${WL_HOME}/server/lib/weblogic.jar:
export CLASSPATH
PATH=${PATCH_PATH}:${WL_HOME}/bin:${JAVA_HOME}/jre/bin:${JAVA_HOME}/bin:${PS_HOME}/bin:$PATH
export PATH

PSLOGGING="-Djava.util.logging.config.file=${DOMAIN_HOME}/piaconfig/properties/logging.properties -Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Jdk14Logger"
export PSLOGGING

